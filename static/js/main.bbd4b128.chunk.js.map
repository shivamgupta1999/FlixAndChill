{"version":3,"sources":["searchMovies.js","App.js","serviceWorker.js","index.js"],"names":["SearchMovies","useState","query","setQuery","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","console","error","className","onSubmit","type","name","placeholder","value","onChange","target","filter","movie","poster_path","map","key","id","src","alt","title","release_date","vote_average","overview","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0KAEe,SAASA,IAAe,IAAD,EAERC,mBAAS,IAFD,mBAE3BC,EAF2B,KAEpBC,EAFoB,OAGNF,mBAAS,IAHH,mBAG3BG,EAH2B,KAGnBC,EAHmB,KAK5BC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBAEIC,EAHW,kHAGsGR,EAHtG,iDAMKS,MAAMD,GANX,cAMPE,EANO,gBAOOA,EAAIC,OAPX,OAOPC,EAPO,OAQbT,EAAUS,EAAKC,SARF,kDAUbC,QAAQC,MAAR,MAVa,0DAAH,sDAclB,OACI,oCACI,0BAAMC,UAAU,OAAOC,SAAUb,GAC7B,2BAAOY,UAAU,QAAQE,KAAK,OAAOC,KAAK,QACtCC,YAAY,iCACZC,MAAOrB,EAAOsB,SAAU,SAACjB,GAAD,OAAOJ,EAASI,EAAEkB,OAAOF,UAErD,4BAAQL,UAAU,SAASE,KAAK,UAAhC,WAEJ,yBAAKF,UAAU,aACVd,EAAOsB,QAAO,SAAAC,GAAK,OAAIA,EAAMC,eAAaC,KAAI,SAAAF,GAAK,OAChD,yBAAKT,UAAU,OAAOY,IAAKH,EAAMI,IAC7B,yBAAKb,UAAU,cACXc,IAAG,0DAAqDL,EAAMC,aAC9DK,IAAKN,EAAMO,MAAQ,YAEvB,yBAAKhB,UAAU,iBACf,wBAAIA,UAAU,eAAeS,EAAMO,OACnC,2BAAG,gDAAsBP,EAAMQ,eAC/B,2BAAG,0CAAgBR,EAAMS,eACzB,uBAAGlB,UAAU,cAAcS,EAAMU,iBC5B1CC,MAVf,WACE,OACE,yBAAKpB,UAAU,aACb,wBAAIA,UAAU,SAAd,gBACA,kBAAClB,EAAD,MACA,sCAAW,uBAAGuC,KAAK,2CAAR,mBCIGC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAvC,GACLD,QAAQC,MAAMA,EAAMwC,a","file":"static/js/main.bbd4b128.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\n\r\nexport default function SearchMovies(){\r\n    \r\n    const [query, setQuery] = useState('');\r\n    const [movies, setMovies] = useState([]);\r\n    \r\n    const searchMovies = async (e) => {\r\n        e.preventDefault();\r\n                \r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=a2b0e6652cade8cab83423a2871d1073&language=en-US&query=${query}&page=1&include_adult=false`;\r\n\r\n        try {\r\n            const res = await fetch(url);\r\n            const data  = await res.json();\r\n            setMovies(data.results);\r\n        }catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <form className=\"form\" onSubmit={searchMovies}>\r\n                <input className=\"input\" type=\"text\" name=\"query\"\r\n                    placeholder=\"Enter a movie i.e. Dark Knight\"\r\n                    value={query} onChange={(e) => setQuery(e.target.value)}\r\n                    />\r\n                <button className=\"button\" type=\"submit\">Search</button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {movies.filter(movie => movie.poster_path).map(movie => (\r\n                    <div className=\"card\" key={movie.id}>\r\n                        <img className=\"card--image\"\r\n                            src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n                            alt={movie.title + ' poster'}\r\n                            />\r\n                        <div className=\"card--content\">\r\n                        <h3 className=\"card--title\">{movie.title}</h3>\r\n                        <p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n                        <p><small>RATING: {movie.vote_average}</small></p>\r\n                        <p className=\"card--desc\">{movie.overview}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n            </div>    \r\n        </>\r\n    )\r\n}","import React from 'react';\nimport SearchMovies from './searchMovies';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"brand\">Flix & Chill</h1>\n      <SearchMovies />\n      <p>Made by <a href=\"https://shivamgupta1999.github.io/MyCV/\">Shivam Gupta</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}